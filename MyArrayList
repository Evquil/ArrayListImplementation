import java.util.Iterator;
import java.util.NoSuchElementException;

/*
Learned about the important of double checking between each run to make sure I didn't forget something like size++. I also learned about iterators and how they work.
I had difficulties in running my code at the end because I made a single mistake, but it made a forever loop that I had to isolate to find which was really challenging since I had to go back through the test code and comment out all of the parts that could be an issue until I found it.
*/

/**
 * An implementation of MyList with an array (a longer exercise would be to
 * implement the List interface as is done in the class java.util.ArrayList: the
 * source of the ArrayList class is available from Sun. Check it out).
 */

public class MyArrayList<E> implements MyList<E> {

	// Use an array for the implementation
	private E[] items; 

	// Default capacity of the array
	private static final int DEFAULT_CAPACITY = 10;

	// Number of elements in the array
	private int size;
	
	private int capacity;

	/**
	 * Constructs a MyArrayList with a specified capacity
	 */
	public MyArrayList(int initialCapacity) {
		this.items = (E[]) new Object[initialCapacity];
		this.size = 0;
		capacity = initialCapacity;
	}

	/**
	 * Constructs a MyArrayList with a default capacity
	 */
	public MyArrayList() {
		this.items = (E[]) new Object[DEFAULT_CAPACITY];
		this.size = 0;
		capacity = DEFAULT_CAPACITY;
	}

	/**
	 * Returns the number of elements in this list.

	O(1)
	 */
	public int size() {
		return this.size;
	}

	/**
	 * Returns true if this list contains no elements.

	O(1)
	 */
	public boolean isEmpty() {
		return (this.size==0);
	}

	/*
	O(n)
	*/
	public void extraCapacity(int extraCapacity) {
		if(this.size + extraCapacity > this.items.length) {
			int newCapacity = this.items.length * 2 + extraCapacity;
			E[] newItems = (E[]) new Object[newCapacity];
			for(int i = 0; i < this.size; i++) {
				newItems[i] = this.items[i];
			}
			this.items = newItems;
		}
	}
	/**
	 * Appends the specified element to the end of this list

	O(n*1)
	 */
	public boolean add(E o) {
		// If there is no room in the array items
		// Make room for the new element
		this.extraCapacity(1);
		this.items[this.size] = o;
		this.size++;
		// add the new element
		
		return true;
	}

	/**
	 * Empties this List

	O(n)
	 */
	public void clear() {
		for(int i = 0; i < this.size; i++) {
			items[i]=null;
		}
		this.size = 0;
	}

	/**
	 * Returns the element at the specified position in this list.

	O(1)
	 */
	public E get(int index) {
		return this.items[index];
	}

	/**
	 * Returns the index of the specified element (-1 if there is no match)

	O(n)
	 */
	public int indexOf(Object o) {
		// If o is null (look for a null element in the array)
		for(int i = 0; i < this.size; i++) {
			if (items[i] == null) {
				if(o == null) {
					return i;
				}
			}else if(items[i].equals(o)) {
				return i;
			}
		}
		return -1;
		// If we get here, o is not in the list
	}

	/**
	 * Returns true if this list contains the specified element.

	O(n*1)
	 */
	public boolean contains(Object o) {
		// easy with indexOf
		if(indexOf(o) == -1) {
			return false;
		}else {
			return true;
		}
	}

	/**
	 * Removes the element in the List at position index

	O(n)
	 */
	public boolean remove(int index) {

		// compact the array

		// let's gc do its work
		if(index < 0 || index > size) {
			throw new IndexOutOfBoundsException();
		}
			items[index] = null;
			
			for(int i = index; i < size; i++) {
				items[i] = items[i+1];
			}
			
			this.size--;
			return true;
	}

	/**
	 * Removes the element in the List at position index

	O(n^2)
	 */
	public boolean remove(Object o) {
		// easy with indexOf and remove
		int a = 0;
		a = indexOf(o);
		if(a == -1) {
			return false;
		}else {
			remove(a);
			return true;
		}
	}

	/**
	 * Adds the specified object at the specified location

	O(n^2)
	 */
	public boolean add(int index, E o) {
		this.extraCapacity(1);
		
		for(int i = size; i > index; i--) {
			items[i] = items[i-1];
		}
		
		items[index] = o;
		
		this.size++;
		
		return true;
		// one way: add at the end and then shift the elements around
	}

	/**
	 * Is this List equal to the specified object?

	O(n)
	 */
public boolean equals(Object o)
    {
        if (((MyArrayList<E>)o).size() == size) {
        	
            // o is an ArrayList
        	
            // if the number of elements is not the same, this and o are not the
			// same
        	
            // Check the elements one by one
        	for(int i = 0; i < size; i++) {
        		if(!items[i].equals(((MyArrayList<E>) o).get(i))) {
        			return false;
        		}
        	}
            // At this point, the lists are equal
        	return true;
        }
		else {
			return false;
	    }
	}
	/**
	 * An inner class to define the iterator
	 */
	private class MyIterator implements Iterator<E> {
		private int index = 0;

		private MyArrayList<E> list;

		private int lastIndex = -1; // index of the object most recently visited

		// by next

		/**
		 * Create an iterator for a MyArrayList
		 */
		public MyIterator(MyArrayList<E> list) {
			this.list = list;
			this.index = 0;
		}

		/**
		 * Any element left in the list?

		O(1)
		 */
		public boolean hasNext() {
			//System.out.println("Index + IteratorSize " + index + " " + list.size());
			return this.index < this.list.size( );
		}

		/**
		 * Returns the current element in the list and move to the next element

		O(1)
		 */
		public E next() {
			if(!hasNext()) {
				throw new NoSuchElementException();
			}
			E temp = this.list.get(index);
			this.index++;
			return temp;
		}

		/**
		 * Removes the last object returned by next

		O(1)
		 */
		public void remove() {
			list.remove(--index);
		}
	}

	/**
	 * Returns an iterator over the elements in this list in proper sequence.
	 * 
	 * @return an iterator over the elements in this list in proper sequence.
	 */
	public Iterator<E> iterator() {
		return new MyIterator(this);
	}
}
